{
  "message": "tensorflow.python.framework.errors_impl.UnimplementedError: Graph execution error:\n\n<...truncated...>as/src/engine/functional.py\", line 512, in call\n      return self._run_internal_graph(inputs, training=training, mask=mask)\n    File \"/Users/angadsingh/.virtualenvs/r-tensorflow/lib/python3.9/site-packages/keras/src/engine/functional.py\", line 651, in _run_internal_graph\n      y = self._conform_to_reference_input(y, ref_input=x)\n    File \"/Users/angadsingh/.virtualenvs/r-tensorflow/lib/python3.9/site-packages/keras/src/engine/functional.py\", line 748, in _conform_to_reference_input\n      tensor = tf.cast(tensor, dtype=ref_input.dtype)\nNode: 'sequential/Cast'\n2 root error(s) found.\n  (0) UNIMPLEMENTED:  Cast string to float is not supported\n\t [[{{node sequential/Cast}}]]\n  (1) CANCELLED:  Function was cancelled before it was started\n0 successful operations.\n0 derived errors ignored. [Op:__inference_train_function_1740166]\nRun `reticulate::py_last_error()` for details.",
  "traceback": ["py_call_impl(callable, call_args$unnamed, call_args$named)", "(structure(function (x = NULL, y = NULL, batch_size = NULL, epochs = 1L, \n    verbose = \"auto\", callbacks = NULL, validation_split = 0, \n    validation_data = NULL, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, steps_per_epoch = NULL, \n    validation_steps = NULL, validation_batch_size = NULL, validation_freq = 1L, \n    max_queue_size = 10L, workers = 1L, use_multiprocessing = FALSE) \n{\n    cl <- sys.call()\n    cl[[1L]] <- list2\n    call_args <- split_named_unnamed(eval(cl, parent.frame()))\n    result <- py_call_impl(callable, call_args$unnamed, call_args$named)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 16L, epochs = 20L, \n    verbose = 2L, validation_split = 0, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, x = <environment>, \n    y = <environment>, validation_data = <environment>, callbacks = list(\n        <environment>, <environment>))", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., as.matrix(carbonTrainingData), \n    carbonTrainingLabels, batch_size = FLAGS$batch_size, epochs = 20, \n    validation_data = list(as.matrix(carbonTestingData), carbonTestLabels), \n    verbose = 2)", "fit(., as.matrix(carbonTrainingData), carbonTrainingLabels, batch_size = FLAGS$batch_size, \n    epochs = 20, validation_data = list(as.matrix(carbonTestingData), \n        carbonTestLabels), verbose = 2)", "model %>% fit(as.matrix(carbonTrainingData), carbonTrainingLabels, \n    batch_size = FLAGS$batch_size, epochs = 20, validation_data = list(as.matrix(carbonTestingData), \n        carbonTestLabels), verbose = 2)", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"carbonEmission.R\", flags = list(learning_rate = c(0.1, \n    0.5, 0.01, 0.001), nodes = c(8, 16, 32, 64, 128), batch_size = c(16, \n    32, 64, 128), activation = c(\"relu\", \"sigmoid\", \"tanh\")), \n    sample = 0.05)"]
}
