{
  "message": "ValueError: in user code:\n\n<...truncated...>_step, args=(data,))\n    File \"/Users/angadsingh/.virtualenvs/r-tensorflow/lib/python3.9/site-packages/keras/src/engine/training.py\", line 1303, in run_step  **\n        outputs = model.train_step(data)\n    File \"/Users/angadsingh/.virtualenvs/r-tensorflow/lib/python3.9/site-packages/keras/src/engine/training.py\", line 1080, in train_step\n        y_pred = self(x, training=True)\n    File \"/Users/angadsingh/.virtualenvs/r-tensorflow/lib/python3.9/site-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/Users/angadsingh/.virtualenvs/r-tensorflow/lib/python3.9/site-packages/keras/src/engine/input_spec.py\", line 298, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Input 0 of layer \"sequential\" is incompatible with the layer: expected shape=(None, 71), found shape=(None, 26)\n\nRun `reticulate::py_last_error()` for details.",
  "traceback": ["py_call_impl(callable, call_args$unnamed, call_args$named)", "(structure(function (x = NULL, y = NULL, batch_size = NULL, epochs = 1L, \n    verbose = \"auto\", callbacks = NULL, validation_split = 0, \n    validation_data = NULL, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, steps_per_epoch = NULL, \n    validation_steps = NULL, validation_batch_size = NULL, validation_freq = 1L, \n    max_queue_size = 10L, workers = 1L, use_multiprocessing = FALSE) \n{\n    cl <- sys.call()\n    cl[[1L]] <- list2\n    call_args <- split_named_unnamed(eval(cl, parent.frame()))\n    result <- py_call_impl(callable, call_args$unnamed, call_args$named)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 128L, epochs = 20L, \n    verbose = 2L, validation_split = 0, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, x = <environment>, \n    y = <environment>, validation_data = <environment>, callbacks = list(\n        <environment>, <environment>))", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., as.matrix(carbonTrainingData), \n    carbonTrainingLabels, batch_size = FLAGS$batch_size, epochs = 20, \n    validation_data = list(as.matrix(carbonTestingData), carbonTestLabels), \n    verbose = 2)", "fit(., as.matrix(carbonTrainingData), carbonTrainingLabels, batch_size = FLAGS$batch_size, \n    epochs = 20, validation_data = list(as.matrix(carbonTestingData), \n        carbonTestLabels), verbose = 2)", "model %>% fit(as.matrix(carbonTrainingData), carbonTrainingLabels, \n    batch_size = FLAGS$batch_size, epochs = 20, validation_data = list(as.matrix(carbonTestingData), \n        carbonTestLabels), verbose = 2)", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"carbonEmission.R\", flags = list(learning_rate = c(0.1, \n    0.5, 0.01, 0.001), nodes = c(8, 16, 32, 64, 128), batch_size = c(16, \n    32, 64, 128), activation = c(\"relu\", \"sigmoid\", \"tanh\")), \n    sample = 0.05)"]
}
